<% 
  ug = Core.user.user_group_parent_ids
  cg_roles = System::CustomGroupRole.where(class_id: 1, user_id: Core.user.id, priv_name: 'read').map(&:custom_group_id)
  cg_roles << System::CustomGroupRole.where(class_id: 2, group_id: ug, priv_name: 'read').map(&:custom_group_id)
  cg_roles << System::CustomGroupRole.where(class_id: 2, group_id: 0, priv_name: 'read').map(&:custom_group_id)
  parent_groups = System::CustomGroup.where(state: "enabled", id: cg_roles.flatten.uniq).order("owner_uid = #{Core.user.id} desc").order(:sort_prefix, :sort_no)
%>
<% first_group_id = parent_groups.blank? ? nil : parent_groups.first.id %>
<% parent_prompt = parent_groups.blank? ? t("rumi.gwcircular.custom_group.message.blank") : false %>

<% affiliated_group_id = Core.user_group.id %>
<% user_child_group = build_select_users(System::UsersGroup.affiliated_users_to_select_option(affiliated_group_id)) %>

<table class="show inputTable">
  <tr>
    <th colspan="3" class="titleTop"><%= t("rumi.gwcircular.commission.custom_group") %>　<%= required(t("rumi.gwcircular.commission.pre_registration")) %></th>
  </tr>
  <tr>
    <td>
      <%= render partial: "shared/select_group", locals: {
        parent_groups: parent_groups, parent_group_selected: first_group_id,
        child_groups: System::CustomGroup.circular_get_user_select(first_group_id),
        hidden_item_name: "item[reader_groups_json]", values: @item.reader_groups_json,
        parent_prompt: parent_prompt, ui_mode: ui_mode_users_custom_group
      } %>
    </td>
  </tr>
</table>

<table class="show inputTable">
  <tr>
    <th colspan="3" class="titleTop"><%= t("rumi.gwcircular.commission.destination") %>　<%= required(t("rumi.gwcircular.commission.select_user")) %></th>
  </tr>
  <tr>
    <td>
      <%= render partial: "shared/select_group", locals: {
        parent_group_selected: affiliated_group_id, child_groups: user_child_group,
        hidden_item_name: "item[readers_json]", values: @item.readers_json,
        ui_mode: ui_mode_users_default
      } %>
    </td>
  </tr>
</table>
